/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package PisProjekt;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.*;


public class AppTest {
    private   GameEngine test = new GameEngine();
    private  List<Integer> array= new ArrayList<>(List.of(10,15));

    @Test
    public  void getMinTest() throws Exception{  // Der test sorg dafür ,dass das minimum(also minimal punkte dass man beim spiel erreichen muss um das Spiel zu gewinnen) immer  gleich 10 sein muss.
        assertEquals(10, test.getMin());
    }

    @Test
    public  void isGameOverFalse() throws Exception{ // mit diesem test prüft man ob ,die positionY von jeder Zombies < 490 ist (in unser Fall ja)  . nur dann kann man mit dem spiel weiter machen!
        assertFalse(test.isGameOver(40));
    }
    @Test
    public  void isGameOverTrue() throws Exception{ // mit diesem test prüft man ob ,die positionY von jeder Zombies tatsächlich < 490 (in unser Fall nein) ist . im diesem fall ist der GameOver!
        assertTrue(test.isGameOver(500));
    }

    @Test
    public  void toStringTest() throws Exception{ //für diesen test geht es darum , zu prüfen ob alle meine Texte gut geschrieben sind
        assertEquals("Bonjour", test.toString("Bonjour"));
    }

    @Test
    public  void iskollisionFalse() throws Exception{  // mit dem test  haben wir die möglichkeit , den Fall zu prüfen ob es keine kollision zwischen den ball und Zombies gibt.
        assertFalse(test.isKollision(200,10,20,15));
    }
    @Test
    public  void iskollisionTrue() throws Exception{ // hier haben wir den Fall geprüft , wo es wirklich eine kollision zwischen den ball und Zombies gibt.
        assertTrue(test.isKollision(25,10,20,15));
    }

    @Test
    public  void nameOfSpielerTest() throws Exception {  // Der test sorg dafür ,dass meine Texte mit einige Eingenschaften( ein bischen schöner) auf dem bildschirm geschreiben sind.
        assertEquals("PIS-PROJEKT-SOSE-2021", test.nameOfSpieler(new ArrayList<>(List.of("Pis","-","projekt","-", "sose","-","2021"))));
    }

    @Test
    public  void summeOfEnemyTest() throws Exception { // hier prüfe ich die korrektheit von einer Addition von zwei(Total von getroffene Zombies) oder mehr Gangzahl ,die im array gespeichert sind. da ich das einfach im Spiel brauche.
        assertEquals(25, test.summeOfEnemy(new ArrayList<>(List.of(10,15))));
    }

    @Test
    public  void count_zombieTest() throws Exception {          // Damit ist es leich zu wissen wie viele zombie tatsächlich in einer Array gibt. in unsere Fall sind 2 zombies pro Array.
        assertEquals(2, test.count_zombie(array,array.size()));
    }
    @Test
    public  void isBadPlayerfalse() throws Exception{  // hier im Gegensatz sorgen wir dafür dass der Spieler insgesamt mindenstens 10 zombies getroffen hat. nur dann ist der Spiel einigermaßen gewonnen.
        assertFalse(test.isBadPlayer(new ArrayList<>(List.of(15,5)),10));
    }
    @Test
    public  void isBadPlayerTrue() throws Exception{ // Mit dem test prüft man ob der Spieler wenige oder sogar kein Zombie wärend des Spiels getroffen hat
        assertTrue(test.isBadPlayer(new ArrayList<>(List.of(6,7)),10));
    }

    @Test
    public  void resetBallTrue() throws Exception{ // mit diesem test prüft man ob ,die positionY vom Ball < 10 (im diesem Fall ja) ist . Dann machen wir ein ResetBall!
        assertTrue(test.resetBall(5,10));
    }

    @Test
    public  void resetBallFalse() throws Exception{  //mit diesem test prüft man ob ,die positionY vom Ball <10 (im diesem Fall nein) ist . Dann machen wir mit dem Spiel weiter!
        assertFalse(test.resetBall(70,10));
    }



}
